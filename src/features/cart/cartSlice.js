import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchItems, addItem, updateItem, deleteItem } from "./cartAPI";

const initialState = {
  items: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action. This will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCartAsync = createAsyncThunk("cart/fetchItems", async () => {
  const response = await fetchItems();
  return response.data;
});

// Add new item
export const addAsync = createAsyncThunk("cart/updateItem", async (item) => {
  const { title, price, thumbnail } = item;
  const response = await addItem({ title, price, thumbnail, quantity: 1 });
  return response.data;
});

// Add new item
export const deleteAsync = createAsyncThunk("cart/deleteItem", async (id) => {
  await deleteItem(id);
  return id;
});

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    IncreaseInCart: (state, action) => {
      console.log("Following cart is called: ", action.payload);
    },
    DecreaseFromCart: (state, action) => {
      console.log("Following cart is called: ", action.payload);
    },
    // your reducer functions here
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCartAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCartAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.items = action.payload;
      })
      .addCase(addAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.items.push(action.payload);
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        console.log(action.payload);
        state.status = "idle";
        const id = action.payload;
        const index = state.items.findIndex((item) => item.id === id);
        state.items.splice(index, 1);
      });
  },
});

export const { IncreaseInCart, DecreaseFromCart, RemoveFromCart } =
  cartSlice.actions;
export default cartSlice.reducer;
